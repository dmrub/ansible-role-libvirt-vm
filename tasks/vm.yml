---
- name: Ensure the VM console log directory exists
  file:
    path: "{{ console_log_path | dirname }}"
    state: directory
    owner: "{{ libvirt_vm_log_owner }}"
    group: "{{ libvirt_vm_log_owner }}"
    recurse: true
    mode: 0770
  when: console_log_enabled | bool
#  become: true

- name: Validate VM interfaces
  include_tasks: check-interface.yml
  vars:
    interface: "{{ item }}"
  with_items: "{{ interfaces }}"

- name: Init VM volume paths
  set_fact:
    vm_volume_paths: {}

- name: Get volume paths of all VM volumes
  command: >
    virsh vol-path
    --pool {{ volume.pool | default('default') | quote }}
    --vol {{ volume.name | quote }}
  loop: "{{ volumes }}"
  loop_control:
    loop_var: volume
  environment: "{{ libvirt_vm_script_env }}"
  register: volume_paths_result
  changed_when:
    - volume_paths_result is success

- name: Set VM volume paths
  set_fact:
    vm_volume_paths: >-
      {{
        vm_volume_paths | combine({
          (item.volume.pool | default('default')): {item.volume.name: item.stdout}},
          recursive=True
        )
      }}
  loop: "{{ volume_paths_result.results }}"
  when: item.rc == 0

- name: Ensure the VM is defined
  virt:
    name: "{{ vm.name }}"
    command: define
    xml: "{{ lookup('template', vm.xml_file | default('vm.xml.j2')) }}"
    uri: "{{ libvirt_vm_uri | default(omit, true) }}"
#  become: true

- name: Ensure the VM is running and started at boot
  virt:
    name: "{{ vm.name }}"
    autostart: "{{ autostart | bool }}"
    state: "{{ 'running' if (start | bool) else 'shutdown' }}"
    uri: "{{ libvirt_vm_uri | default(omit, true) }}"
#  become: true
