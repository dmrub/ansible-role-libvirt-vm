---
- name: Ensure remote images are downloaded
  get_url:
    url: "{{ item }}"
    dest: "{{ libvirt_vm_image_cache_path }}/{{ item | basename }}"
  with_items: "{{ volumes | selectattr('image', 'defined') | map(attribute='image') | list }}"
  when: "'http' in item"

- name: Ensure local images are copied
  copy:
    src: "{{ item }}"
    dest: "{{ libvirt_vm_image_cache_path }}/{{ item | basename }}"
  with_items: "{{ volumes | selectattr('image', 'defined') | map(attribute='image') | list }}"
  when: "'http' not in item"

- name: Clone volumes
  script: >
    clone_virt_volume.sh
    {{ item.clone | quote }}
    {{ item.name | quote }}
    {{ item.pool | quote }}
    {{ item.capacity | default('') | quote }}
  with_items: "{{ volumes }}"
  when: "item.clone is defined"
  environment: "{{ libvirt_vm_script_env }}"
  register: volume_result
  changed_when:
    - volume_result is success
    - (volume_result.stdout | from_json).changed | default(True)
  become: true # Because of chmod

- name: Ensure the VM volumes exist
  script: >
    virt_volume.sh
    -n {{ item.name | quote }}
    -p {{ item.pool | quote }}
    {% if item.capacity is defined %}
    -c {{ item.capacity | quote }}
    {% endif %}
    -f {{ item.format | default(libvirt_volume_default_format) | quote }}
    {% if item.image is defined %}
    -i {{ libvirt_vm_image_cache_path | quote }}/{{ item.image | basename | quote }}
    {% elif item.backing_image is defined %}
    -b {{ item.backing_image | quote }}
    {% endif %}
  with_items: "{{ volumes }}"
  environment: "{{ libvirt_vm_script_env }}"
  register: volume_result
  changed_when:
    - volume_result is success
    - (volume_result.stdout | from_json).changed | default(True)
  become: true
